

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 07 12:16:18 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 1.45
    17                           ; Generated 16/11/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110                           
   111                           	psect	strings
   112  0003                     __pstrings:	
   113  0003                     stringtab:	
   114  0003                     __stringtab:	
   115  0003                     stringcode:	
   116                           ;	String table - string pointers are 1 byte each
   117                           
   118  0003                     stringdir:	
   119  0003  3000               	movlw	high stringdir
   120  0004  008A               	movwf	10
   121  0005  0804               	movf	4,w
   122  0006  0A84               	incf	4,f
   123  0007  0782               	addwf	2,f
   124  0008                     __stringbase:	
   125  0008  3400               	retlw	0
   126  0009                     __end_of__stringtab:	
   127  0009                     _dizi:	
   128  0009  343F               	retlw	63
   129  000A  3406               	retlw	6
   130  000B  345B               	retlw	91
   131  000C  344F               	retlw	79
   132  000D  3466               	retlw	102
   133  000E  346D               	retlw	109
   134  000F  347D               	retlw	125
   135  0010  3407               	retlw	7
   136  0011  347F               	retlw	127
   137  0012  346F               	retlw	111
   138  0013                     __end_of_dizi:	
   139                           
   140                           	psect	nvBANK0
   141  0020                     __pnvBANK0:	
   142  0020                     _binler:	
   143  0020                     	ds	2
   144  0022                     _yuzler:	
   145  0022                     	ds	2
   146  0024                     _onlar:	
   147  0024                     	ds	2
   148  0026                     _birler:	
   149  0026                     	ds	2
   150  0005                     _PORTA	set	5
   151  0008                     _PORTD	set	8
   152  003B                     _RC3	set	59
   153  003A                     _RC2	set	58
   154  0029                     _RA1	set	41
   155  0028                     _RA0	set	40
   156  0085                     _TRISA	set	133
   157  0088                     _TRISD	set	136
   158                           
   159                           ; #config settings
   160  0000                     
   161                           	psect	cinit
   162  07FA                     start_initialization:	
   163  07FA                     __initialization:	
   164                           
   165                           ; Clear objects allocated to COMMON
   166  07FA  01FB               	clrf	__pbssCOMMON& (0+127)
   167  07FB  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   168  07FC                     end_of_initialization:	
   169                           ;End of C runtime variable initialization code
   170                           
   171  07FC                     __end_of__initialization:	
   172  07FC  0183               	clrf	3
   173  07FD  120A  118A  2EE4   	ljmp	_main	;jump to C main() function
   174                           
   175                           	psect	bssCOMMON
   176  007B                     __pbssCOMMON:	
   177  007B                     _sayi:	
   178  007B                     	ds	2
   179                           
   180                           	psect	cstackCOMMON
   181  0070                     __pcstackCOMMON:	
   182  0070                     ?_main:	
   183  0070                     ?___wmul:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ?___awmod:	
   187                           ; 2 bytes @ 0x0
   188                           
   189  0070                     ___wmul@multiplier:	
   190                           ; 2 bytes @ 0x0
   191                           
   192  0070                     ___awmod@divisor:	
   193                           ; 2 bytes @ 0x0
   194                           
   195                           
   196                           ; 2 bytes @ 0x0
   197  0070                     	ds	2
   198  0072                     ___wmul@multiplicand:	
   199  0072                     ___awmod@dividend:	
   200                           ; 2 bytes @ 0x2
   201                           
   202                           
   203                           ; 2 bytes @ 0x2
   204  0072                     	ds	2
   205  0074                     ??___wmul:	
   206  0074                     ??___awmod:	
   207                           ; 1 bytes @ 0x4
   208                           
   209  0074                     ___wmul@product:	
   210                           ; 1 bytes @ 0x4
   211                           
   212                           
   213                           ; 2 bytes @ 0x4
   214  0074                     	ds	1
   215  0075                     ___awmod@counter:	
   216                           
   217                           ; 1 bytes @ 0x5
   218  0075                     	ds	1
   219  0076                     ?___awdiv:	
   220  0076                     ___awmod@sign:	
   221                           ; 2 bytes @ 0x6
   222                           
   223  0076                     ___awdiv@divisor:	
   224                           ; 1 bytes @ 0x6
   225                           
   226                           
   227                           ; 2 bytes @ 0x6
   228  0076                     	ds	2
   229  0078                     ___awdiv@dividend:	
   230                           
   231                           ; 2 bytes @ 0x8
   232  0078                     	ds	2
   233  007A                     ??___awdiv:	
   234                           
   235                           ; 1 bytes @ 0xA
   236  007A                     	ds	1
   237                           
   238                           	psect	cstackBANK0
   239  0028                     __pcstackBANK0:	
   240  0028                     ___awdiv@counter:	
   241                           
   242                           ; 1 bytes @ 0x0
   243  0028                     	ds	1
   244  0029                     ___awdiv@sign:	
   245                           
   246                           ; 1 bytes @ 0x1
   247  0029                     	ds	1
   248  002A                     ___awdiv@quotient:	
   249                           
   250                           ; 2 bytes @ 0x2
   251  002A                     	ds	2
   252  002C                     ??_main:	
   253                           
   254                           ; 1 bytes @ 0x4
   255  002C                     	ds	4
   256                           
   257                           	psect	maintext
   258  06E4                     __pmaintext:	
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 71 in file "mcu6.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   273 ;; Tracked objects:
   274 ;;		On entry : B00/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   278 ;;      Params:         0       0       0       0       0
   279 ;;      Locals:         0       0       0       0       0
   280 ;;      Temps:          0       4       0       0       0
   281 ;;      Totals:         0       4       0       0       0
   282 ;;Total ram usage:        4 bytes
   283 ;; Hardware stack levels required when called:    1
   284 ;; This function calls:
   285 ;;		___awdiv
   286 ;;		___awmod
   287 ;;		___wmul
   288 ;; This function is called by:
   289 ;;		Startup code after reset
   290 ;; This function uses a non-reentrant model
   291 ;;
   292                           
   293                           
   294                           ;psect for function _main
   295  06E4                     _main:	
   296                           
   297                           ;mcu6.c: 72: TRISD=0x00;
   298                           
   299                           ;incstack = 0
   300                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   301  06E4  1683               	bsf	3,5	;RP0=1, select bank1
   302  06E5  1303               	bcf	3,6	;RP1=0, select bank1
   303  06E6  0188               	clrf	8	;volatile
   304                           
   305                           ;mcu6.c: 73: PORTD=0x00;
   306  06E7  1283               	bcf	3,5	;RP0=0, select bank0
   307  06E8  1303               	bcf	3,6	;RP1=0, select bank0
   308  06E9  0188               	clrf	8	;volatile
   309                           
   310                           ;mcu6.c: 74: TRISA=0x00;
   311  06EA  1683               	bsf	3,5	;RP0=1, select bank1
   312  06EB  1303               	bcf	3,6	;RP1=0, select bank1
   313  06EC  0185               	clrf	5	;volatile
   314                           
   315                           ;mcu6.c: 75: PORTA=0x00;
   316  06ED  1283               	bcf	3,5	;RP0=0, select bank0
   317  06EE  1303               	bcf	3,6	;RP1=0, select bank0
   318  06EF  0185               	clrf	5	;volatile
   319  06F0                     l736:	
   320                           ;mcu6.c: 76: while(1){
   321                           
   322                           
   323                           ;mcu6.c: 78: binler=sayi/1000;
   324  06F0  30E8               	movlw	232
   325  06F1  00F6               	movwf	___awdiv@divisor
   326  06F2  3003               	movlw	3
   327  06F3  00F7               	movwf	___awdiv@divisor+1
   328  06F4  087C               	movf	_sayi+1,w
   329  06F5  00F9               	movwf	___awdiv@dividend+1
   330  06F6  087B               	movf	_sayi,w
   331  06F7  00F8               	movwf	___awdiv@dividend
   332  06F8  120A  118A  2689  120A  118A  	fcall	___awdiv
   333  06FD  0877               	movf	?___awdiv+1,w
   334  06FE  1283               	bcf	3,5	;RP0=0, select bank0
   335  06FF  1303               	bcf	3,6	;RP1=0, select bank0
   336  0700  00A1               	movwf	_binler+1
   337  0701  0876               	movf	?___awdiv,w
   338  0702  00A0               	movwf	_binler
   339                           
   340                           ;mcu6.c: 79: yuzler=(sayi-binler*1000)/100;
   341  0703  3064               	movlw	100
   342  0704  00F6               	movwf	___awdiv@divisor
   343  0705  3000               	movlw	0
   344  0706  00F7               	movwf	___awdiv@divisor+1
   345  0707  0821               	movf	_binler+1,w
   346  0708  00F1               	movwf	___wmul@multiplier+1
   347  0709  0820               	movf	_binler,w
   348  070A  00F0               	movwf	___wmul@multiplier
   349  070B  30E8               	movlw	232
   350  070C  00F2               	movwf	___wmul@multiplicand
   351  070D  3003               	movlw	3
   352  070E  00F3               	movwf	___wmul@multiplicand+1
   353  070F  120A  118A  261D  120A  118A  	fcall	___wmul
   354  0714  0970               	comf	?___wmul,w
   355  0715  1283               	bcf	3,5	;RP0=0, select bank0
   356  0716  1303               	bcf	3,6	;RP1=0, select bank0
   357  0717  00AC               	movwf	??_main
   358  0718  0971               	comf	?___wmul+1,w
   359  0719  00AD               	movwf	??_main+1
   360  071A  0AAC               	incf	??_main,f
   361  071B  1903               	skipnz
   362  071C  0AAD               	incf	??_main+1,f
   363  071D  087B               	movf	_sayi,w
   364  071E  072C               	addwf	??_main,w
   365  071F  00F8               	movwf	___awdiv@dividend
   366  0720  087C               	movf	_sayi+1,w
   367  0721  1803               	skipnc
   368  0722  0A7C               	incf	_sayi+1,w
   369  0723  072D               	addwf	??_main+1,w
   370  0724  00F9               	movwf	___awdiv@dividend+1
   371  0725  120A  118A  2689  120A  118A  	fcall	___awdiv
   372  072A  0877               	movf	?___awdiv+1,w
   373  072B  1283               	bcf	3,5	;RP0=0, select bank0
   374  072C  1303               	bcf	3,6	;RP1=0, select bank0
   375  072D  00A3               	movwf	_yuzler+1
   376  072E  0876               	movf	?___awdiv,w
   377  072F  00A2               	movwf	_yuzler
   378                           
   379                           ;mcu6.c: 80: onlar=(sayi-binler*1000-yuzler*100)/10;
   380  0730  300A               	movlw	10
   381  0731  00F6               	movwf	___awdiv@divisor
   382  0732  3000               	movlw	0
   383  0733  00F7               	movwf	___awdiv@divisor+1
   384  0734  0821               	movf	_binler+1,w
   385  0735  00F1               	movwf	___wmul@multiplier+1
   386  0736  0820               	movf	_binler,w
   387  0737  00F0               	movwf	___wmul@multiplier
   388  0738  30E8               	movlw	232
   389  0739  00F2               	movwf	___wmul@multiplicand
   390  073A  3003               	movlw	3
   391  073B  00F3               	movwf	___wmul@multiplicand+1
   392  073C  120A  118A  261D  120A  118A  	fcall	___wmul
   393  0741  0870               	movf	?___wmul,w
   394  0742  1283               	bcf	3,5	;RP0=0, select bank0
   395  0743  1303               	bcf	3,6	;RP1=0, select bank0
   396  0744  00AC               	movwf	??_main
   397  0745  0871               	movf	?___wmul+1,w
   398  0746  00AD               	movwf	??_main+1
   399  0747  0823               	movf	_yuzler+1,w
   400  0748  00F1               	movwf	___wmul@multiplier+1
   401  0749  0822               	movf	_yuzler,w
   402  074A  00F0               	movwf	___wmul@multiplier
   403  074B  3064               	movlw	100
   404  074C  00F2               	movwf	___wmul@multiplicand
   405  074D  3000               	movlw	0
   406  074E  00F3               	movwf	___wmul@multiplicand+1
   407  074F  120A  118A  261D  120A  118A  	fcall	___wmul
   408  0754  0870               	movf	?___wmul,w
   409  0755  1283               	bcf	3,5	;RP0=0, select bank0
   410  0756  1303               	bcf	3,6	;RP1=0, select bank0
   411  0757  072C               	addwf	??_main,w
   412  0758  00AE               	movwf	??_main+2
   413  0759  0871               	movf	?___wmul+1,w
   414  075A  1803               	skipnc
   415  075B  0A71               	incf	?___wmul+1,w
   416  075C  072D               	addwf	??_main+1,w
   417  075D  00AF               	movwf	??_main+3
   418  075E  09AE               	comf	??_main+2,f
   419  075F  09AF               	comf	??_main+3,f
   420  0760  0AAE               	incf	??_main+2,f
   421  0761  1903               	skipnz
   422  0762  0AAF               	incf	??_main+3,f
   423  0763  087B               	movf	_sayi,w
   424  0764  072E               	addwf	??_main+2,w
   425  0765  00F8               	movwf	___awdiv@dividend
   426  0766  087C               	movf	_sayi+1,w
   427  0767  1803               	skipnc
   428  0768  0A7C               	incf	_sayi+1,w
   429  0769  072F               	addwf	??_main+3,w
   430  076A  00F9               	movwf	___awdiv@dividend+1
   431  076B  120A  118A  2689  120A  118A  	fcall	___awdiv
   432  0770  0877               	movf	?___awdiv+1,w
   433  0771  1283               	bcf	3,5	;RP0=0, select bank0
   434  0772  1303               	bcf	3,6	;RP1=0, select bank0
   435  0773  00A5               	movwf	_onlar+1
   436  0774  0876               	movf	?___awdiv,w
   437  0775  00A4               	movwf	_onlar
   438                           
   439                           ;mcu6.c: 81: birler=sayi%10;
   440  0776  300A               	movlw	10
   441  0777  00F0               	movwf	___awmod@divisor
   442  0778  3000               	movlw	0
   443  0779  00F1               	movwf	___awmod@divisor+1
   444  077A  087C               	movf	_sayi+1,w
   445  077B  00F3               	movwf	___awmod@dividend+1
   446  077C  087B               	movf	_sayi,w
   447  077D  00F2               	movwf	___awmod@dividend
   448  077E  120A  118A  263E  120A  118A  	fcall	___awmod
   449  0783  0871               	movf	?___awmod+1,w
   450  0784  1283               	bcf	3,5	;RP0=0, select bank0
   451  0785  1303               	bcf	3,6	;RP1=0, select bank0
   452  0786  00A7               	movwf	_birler+1
   453  0787  0870               	movf	?___awmod,w
   454  0788  00A6               	movwf	_birler
   455                           
   456                           ;mcu6.c: 83: RA0=0;
   457  0789  1005               	bcf	5,0	;volatile
   458                           
   459                           ;mcu6.c: 84: PORTD=dizi[birler];
   460  078A  0826               	movf	_birler,w
   461  078B  3E01               	addlw	low ((_dizi-__stringbase)| (0+32768))
   462  078C  0084               	movwf	4
   463  078D  120A  118A  2003  120A  118A  	fcall	stringdir
   464  0792  0088               	movwf	8	;volatile
   465                           
   466                           ;mcu6.c: 85: RA0=1;
   467  0793  1405               	bsf	5,0	;volatile
   468                           
   469                           ;mcu6.c: 86: _delay((unsigned long)((500)*(4000000/4000.0)));
   470  0794  3003               	movlw	3
   471  0795  1283               	bcf	3,5	;RP0=0, select bank0
   472  0796  1303               	bcf	3,6	;RP1=0, select bank0
   473  0797  00AE               	movwf	??_main+2
   474  0798  308A               	movlw	138
   475  0799  00AD               	movwf	??_main+1
   476  079A  3055               	movlw	85
   477  079B  00AC               	movwf	??_main
   478  079C                     u477:	
   479  079C  0BAC               	decfsz	??_main,f
   480  079D  2F9C               	goto	u477
   481  079E  0BAD               	decfsz	??_main+1,f
   482  079F  2F9C               	goto	u477
   483  07A0  0BAE               	decfsz	??_main+2,f
   484  07A1  2F9C               	goto	u477
   485                           
   486                           ;mcu6.c: 88: RA1=0;
   487  07A2  1283               	bcf	3,5	;RP0=0, select bank0
   488  07A3  1303               	bcf	3,6	;RP1=0, select bank0
   489  07A4  1085               	bcf	5,1	;volatile
   490                           
   491                           ;mcu6.c: 89: PORTD=dizi[onlar];
   492  07A5  0824               	movf	_onlar,w
   493  07A6  3E01               	addlw	low ((_dizi-__stringbase)| (0+32768))
   494  07A7  0084               	movwf	4
   495  07A8  120A  118A  2003  120A  118A  	fcall	stringdir
   496  07AD  0088               	movwf	8	;volatile
   497                           
   498                           ;mcu6.c: 90: RA1=1;
   499  07AE  1485               	bsf	5,1	;volatile
   500                           
   501                           ;mcu6.c: 91: _delay((unsigned long)((500)*(4000000/4000.0)));
   502  07AF  3003               	movlw	3
   503  07B0  1283               	bcf	3,5	;RP0=0, select bank0
   504  07B1  1303               	bcf	3,6	;RP1=0, select bank0
   505  07B2  00AE               	movwf	??_main+2
   506  07B3  308A               	movlw	138
   507  07B4  00AD               	movwf	??_main+1
   508  07B5  3055               	movlw	85
   509  07B6  00AC               	movwf	??_main
   510  07B7                     u487:	
   511  07B7  0BAC               	decfsz	??_main,f
   512  07B8  2FB7               	goto	u487
   513  07B9  0BAD               	decfsz	??_main+1,f
   514  07BA  2FB7               	goto	u487
   515  07BB  0BAE               	decfsz	??_main+2,f
   516  07BC  2FB7               	goto	u487
   517                           
   518                           ;mcu6.c: 93: RC2=0;
   519  07BD  1283               	bcf	3,5	;RP0=0, select bank0
   520  07BE  1303               	bcf	3,6	;RP1=0, select bank0
   521  07BF  1107               	bcf	7,2	;volatile
   522                           
   523                           ;mcu6.c: 94: PORTD=dizi[yuzler];
   524  07C0  0822               	movf	_yuzler,w
   525  07C1  3E01               	addlw	low ((_dizi-__stringbase)| (0+32768))
   526  07C2  0084               	movwf	4
   527  07C3  120A  118A  2003  120A  118A  	fcall	stringdir
   528  07C8  0088               	movwf	8	;volatile
   529                           
   530                           ;mcu6.c: 95: RC2=1;
   531  07C9  1507               	bsf	7,2	;volatile
   532                           
   533                           ;mcu6.c: 96: _delay((unsigned long)((500)*(4000000/4000.0)));
   534  07CA  3003               	movlw	3
   535  07CB  1283               	bcf	3,5	;RP0=0, select bank0
   536  07CC  1303               	bcf	3,6	;RP1=0, select bank0
   537  07CD  00AE               	movwf	??_main+2
   538  07CE  308A               	movlw	138
   539  07CF  00AD               	movwf	??_main+1
   540  07D0  3055               	movlw	85
   541  07D1  00AC               	movwf	??_main
   542  07D2                     u497:	
   543  07D2  0BAC               	decfsz	??_main,f
   544  07D3  2FD2               	goto	u497
   545  07D4  0BAD               	decfsz	??_main+1,f
   546  07D5  2FD2               	goto	u497
   547  07D6  0BAE               	decfsz	??_main+2,f
   548  07D7  2FD2               	goto	u497
   549                           
   550                           ;mcu6.c: 98: RC3=0;
   551  07D8  1283               	bcf	3,5	;RP0=0, select bank0
   552  07D9  1303               	bcf	3,6	;RP1=0, select bank0
   553  07DA  1187               	bcf	7,3	;volatile
   554                           
   555                           ;mcu6.c: 99: PORTD=dizi[binler];
   556  07DB  0820               	movf	_binler,w
   557  07DC  3E01               	addlw	low ((_dizi-__stringbase)| (0+32768))
   558  07DD  0084               	movwf	4
   559  07DE  120A  118A  2003  120A  118A  	fcall	stringdir
   560  07E3  0088               	movwf	8	;volatile
   561                           
   562                           ;mcu6.c: 100: RC3=1;
   563  07E4  1587               	bsf	7,3	;volatile
   564                           
   565                           ;mcu6.c: 101: _delay((unsigned long)((500)*(4000000/4000.0)));
   566  07E5  3003               	movlw	3
   567  07E6  1283               	bcf	3,5	;RP0=0, select bank0
   568  07E7  1303               	bcf	3,6	;RP1=0, select bank0
   569  07E8  00AE               	movwf	??_main+2
   570  07E9  308A               	movlw	138
   571  07EA  00AD               	movwf	??_main+1
   572  07EB  3055               	movlw	85
   573  07EC  00AC               	movwf	??_main
   574  07ED                     u507:	
   575  07ED  0BAC               	decfsz	??_main,f
   576  07EE  2FED               	goto	u507
   577  07EF  0BAD               	decfsz	??_main+1,f
   578  07F0  2FED               	goto	u507
   579  07F1  0BAE               	decfsz	??_main+2,f
   580  07F2  2FED               	goto	u507
   581                           
   582                           ;mcu6.c: 103: sayi++;
   583  07F3  3001               	movlw	1
   584  07F4  07FB               	addwf	_sayi,f
   585  07F5  1803               	skipnc
   586  07F6  0AFC               	incf	_sayi+1,f
   587  07F7  3000               	movlw	0
   588  07F8  07FC               	addwf	_sayi+1,f
   589  07F9  2EF0               	goto	l736
   590  07FA                     __end_of_main:	
   591                           
   592                           	psect	text1
   593  061D                     __ptext1:	
   594 ;; *************** function ___wmul *****************
   595 ;; Defined at:
   596 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;  multiplier      2    0[COMMON] unsigned int 
   599 ;;  multiplicand    2    2[COMMON] unsigned int 
   600 ;; Auto vars:     Size  Location     Type
   601 ;;  product         2    4[COMMON] unsigned int 
   602 ;; Return value:  Size  Location     Type
   603 ;;                  2    0[COMMON] unsigned int 
   604 ;; Registers used:
   605 ;;		wreg, status,2, status,0
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   611 ;;      Params:         4       0       0       0       0
   612 ;;      Locals:         2       0       0       0       0
   613 ;;      Temps:          0       0       0       0       0
   614 ;;      Totals:         6       0       0       0       0
   615 ;;Total ram usage:        6 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; This function calls:
   618 ;;		Nothing
   619 ;; This function is called by:
   620 ;;		_main
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           
   625                           ;psect for function ___wmul
   626  061D                     ___wmul:	
   627                           
   628                           ;incstack = 0
   629                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   630  061D  01F4               	clrf	___wmul@product
   631  061E  01F5               	clrf	___wmul@product+1
   632  061F                     l640:	
   633  061F  1C70               	btfss	___wmul@multiplier,0
   634  0620  2E27               	goto	l122
   635  0621  0872               	movf	___wmul@multiplicand,w
   636  0622  07F4               	addwf	___wmul@product,f
   637  0623  1803               	skipnc
   638  0624  0AF5               	incf	___wmul@product+1,f
   639  0625  0873               	movf	___wmul@multiplicand+1,w
   640  0626  07F5               	addwf	___wmul@product+1,f
   641  0627                     l122:	
   642  0627  3001               	movlw	1
   643  0628                     u255:	
   644  0628  1003               	clrc
   645  0629  0DF2               	rlf	___wmul@multiplicand,f
   646  062A  0DF3               	rlf	___wmul@multiplicand+1,f
   647  062B  3EFF               	addlw	-1
   648  062C  1D03               	skipz
   649  062D  2E28               	goto	u255
   650  062E  3001               	movlw	1
   651  062F                     u265:	
   652  062F  1003               	clrc
   653  0630  0CF1               	rrf	___wmul@multiplier+1,f
   654  0631  0CF0               	rrf	___wmul@multiplier,f
   655  0632  3EFF               	addlw	-1
   656  0633  1D03               	skipz
   657  0634  2E2F               	goto	u265
   658  0635  0870               	movf	___wmul@multiplier,w
   659  0636  0471               	iorwf	___wmul@multiplier+1,w
   660  0637  1D03               	btfss	3,2
   661  0638  2E1F               	goto	l640
   662  0639  0875               	movf	___wmul@product+1,w
   663  063A  00F1               	movwf	?___wmul+1
   664  063B  0874               	movf	___wmul@product,w
   665  063C  00F0               	movwf	?___wmul
   666  063D  0008               	return
   667  063E                     __end_of___wmul:	
   668                           
   669                           	psect	text2
   670  063E                     __ptext2:	
   671 ;; *************** function ___awmod *****************
   672 ;; Defined at:
   673 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;  divisor         2    0[COMMON] int 
   676 ;;  dividend        2    2[COMMON] int 
   677 ;; Auto vars:     Size  Location     Type
   678 ;;  sign            1    6[COMMON] unsigned char 
   679 ;;  counter         1    5[COMMON] unsigned char 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  2    0[COMMON] int 
   682 ;; Registers used:
   683 ;;		wreg, status,2, status,0
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   689 ;;      Params:         4       0       0       0       0
   690 ;;      Locals:         2       0       0       0       0
   691 ;;      Temps:          1       0       0       0       0
   692 ;;      Totals:         7       0       0       0       0
   693 ;;Total ram usage:        7 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		_main
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           
   703                           ;psect for function ___awmod
   704  063E                     ___awmod:	
   705                           
   706                           ;incstack = 0
   707                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   708  063E  01F6               	clrf	___awmod@sign
   709  063F  1FF3               	btfss	___awmod@dividend+1,7
   710  0640  2E48               	goto	l704
   711  0641  09F2               	comf	___awmod@dividend,f
   712  0642  09F3               	comf	___awmod@dividend+1,f
   713  0643  0AF2               	incf	___awmod@dividend,f
   714  0644  1903               	skipnz
   715  0645  0AF3               	incf	___awmod@dividend+1,f
   716  0646  01F6               	clrf	___awmod@sign
   717  0647  0AF6               	incf	___awmod@sign,f
   718  0648                     l704:	
   719  0648  1FF1               	btfss	___awmod@divisor+1,7
   720  0649  2E4F               	goto	l708
   721  064A  09F0               	comf	___awmod@divisor,f
   722  064B  09F1               	comf	___awmod@divisor+1,f
   723  064C  0AF0               	incf	___awmod@divisor,f
   724  064D  1903               	skipnz
   725  064E  0AF1               	incf	___awmod@divisor+1,f
   726  064F                     l708:	
   727  064F  0870               	movf	___awmod@divisor,w
   728  0650  0471               	iorwf	___awmod@divisor+1,w
   729  0651  1903               	btfsc	3,2
   730  0652  2E7C               	goto	l726
   731  0653  01F5               	clrf	___awmod@counter
   732  0654  0AF5               	incf	___awmod@counter,f
   733  0655                     l716:	
   734  0655  1BF1               	btfsc	___awmod@divisor+1,7
   735  0656  2E63               	goto	l718
   736  0657  3001               	movlw	1
   737  0658                     u415:	
   738  0658  1003               	clrc
   739  0659  0DF0               	rlf	___awmod@divisor,f
   740  065A  0DF1               	rlf	___awmod@divisor+1,f
   741  065B  3EFF               	addlw	-1
   742  065C  1D03               	skipz
   743  065D  2E58               	goto	u415
   744  065E  3001               	movlw	1
   745  065F  00F4               	movwf	??___awmod
   746  0660  0874               	movf	??___awmod,w
   747  0661  07F5               	addwf	___awmod@counter,f
   748  0662  2E55               	goto	l716
   749  0663                     l718:	
   750  0663  0871               	movf	___awmod@divisor+1,w
   751  0664  0273               	subwf	___awmod@dividend+1,w
   752  0665  1D03               	skipz
   753  0666  2E69               	goto	u435
   754  0667  0870               	movf	___awmod@divisor,w
   755  0668  0272               	subwf	___awmod@dividend,w
   756  0669                     u435:	
   757  0669  1C03               	skipc
   758  066A  2E71               	goto	l722
   759  066B  0870               	movf	___awmod@divisor,w
   760  066C  02F2               	subwf	___awmod@dividend,f
   761  066D  0871               	movf	___awmod@divisor+1,w
   762  066E  1C03               	skipc
   763  066F  03F3               	decf	___awmod@dividend+1,f
   764  0670  02F3               	subwf	___awmod@dividend+1,f
   765  0671                     l722:	
   766  0671  3001               	movlw	1
   767  0672                     u445:	
   768  0672  1003               	clrc
   769  0673  0CF1               	rrf	___awmod@divisor+1,f
   770  0674  0CF0               	rrf	___awmod@divisor,f
   771  0675  3EFF               	addlw	-1
   772  0676  1D03               	skipz
   773  0677  2E72               	goto	u445
   774  0678  3001               	movlw	1
   775  0679  02F5               	subwf	___awmod@counter,f
   776  067A  1D03               	btfss	3,2
   777  067B  2E63               	goto	l718
   778  067C                     l726:	
   779  067C  0876               	movf	___awmod@sign,w
   780  067D  1903               	btfsc	3,2
   781  067E  2E84               	goto	l730
   782  067F  09F2               	comf	___awmod@dividend,f
   783  0680  09F3               	comf	___awmod@dividend+1,f
   784  0681  0AF2               	incf	___awmod@dividend,f
   785  0682  1903               	skipnz
   786  0683  0AF3               	incf	___awmod@dividend+1,f
   787  0684                     l730:	
   788  0684  0873               	movf	___awmod@dividend+1,w
   789  0685  00F1               	movwf	?___awmod+1
   790  0686  0872               	movf	___awmod@dividend,w
   791  0687  00F0               	movwf	?___awmod
   792  0688  0008               	return
   793  0689                     __end_of___awmod:	
   794                           
   795                           	psect	text3
   796  0689                     __ptext3:	
   797 ;; *************** function ___awdiv *****************
   798 ;; Defined at:
   799 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  divisor         2    6[COMMON] int 
   802 ;;  dividend        2    8[COMMON] int 
   803 ;; Auto vars:     Size  Location     Type
   804 ;;  quotient        2    2[BANK0 ] int 
   805 ;;  sign            1    1[BANK0 ] unsigned char 
   806 ;;  counter         1    0[BANK0 ] unsigned char 
   807 ;; Return value:  Size  Location     Type
   808 ;;                  2    6[COMMON] int 
   809 ;; Registers used:
   810 ;;		wreg, status,2, status,0
   811 ;; Tracked objects:
   812 ;;		On entry : 0/0
   813 ;;		On exit  : 0/0
   814 ;;		Unchanged: 0/0
   815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   816 ;;      Params:         4       0       0       0       0
   817 ;;      Locals:         0       4       0       0       0
   818 ;;      Temps:          1       0       0       0       0
   819 ;;      Totals:         5       4       0       0       0
   820 ;;Total ram usage:        9 bytes
   821 ;; Hardware stack levels used:    1
   822 ;; This function calls:
   823 ;;		Nothing
   824 ;; This function is called by:
   825 ;;		_main
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           
   830                           ;psect for function ___awdiv
   831  0689                     ___awdiv:	
   832                           
   833                           ;incstack = 0
   834                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   835  0689  1283               	bcf	3,5	;RP0=0, select bank0
   836  068A  1303               	bcf	3,6	;RP1=0, select bank0
   837  068B  01A9               	clrf	___awdiv@sign
   838  068C  1FF7               	btfss	___awdiv@divisor+1,7
   839  068D  2E95               	goto	l660
   840  068E  09F6               	comf	___awdiv@divisor,f
   841  068F  09F7               	comf	___awdiv@divisor+1,f
   842  0690  0AF6               	incf	___awdiv@divisor,f
   843  0691  1903               	skipnz
   844  0692  0AF7               	incf	___awdiv@divisor+1,f
   845  0693  01A9               	clrf	___awdiv@sign
   846  0694  0AA9               	incf	___awdiv@sign,f
   847  0695                     l660:	
   848  0695  1FF9               	btfss	___awdiv@dividend+1,7
   849  0696  2EA0               	goto	l666
   850  0697  09F8               	comf	___awdiv@dividend,f
   851  0698  09F9               	comf	___awdiv@dividend+1,f
   852  0699  0AF8               	incf	___awdiv@dividend,f
   853  069A  1903               	skipnz
   854  069B  0AF9               	incf	___awdiv@dividend+1,f
   855  069C  3001               	movlw	1
   856  069D  00FA               	movwf	??___awdiv
   857  069E  087A               	movf	??___awdiv,w
   858  069F  06A9               	xorwf	___awdiv@sign,f
   859  06A0                     l666:	
   860  06A0  01AA               	clrf	___awdiv@quotient
   861  06A1  01AB               	clrf	___awdiv@quotient+1
   862  06A2  0876               	movf	___awdiv@divisor,w
   863  06A3  0477               	iorwf	___awdiv@divisor+1,w
   864  06A4  1903               	btfsc	3,2
   865  06A5  2ED7               	goto	l688
   866  06A6  01A8               	clrf	___awdiv@counter
   867  06A7  0AA8               	incf	___awdiv@counter,f
   868  06A8                     l676:	
   869  06A8  1BF7               	btfsc	___awdiv@divisor+1,7
   870  06A9  2EB6               	goto	l678
   871  06AA  3001               	movlw	1
   872  06AB                     u315:	
   873  06AB  1003               	clrc
   874  06AC  0DF6               	rlf	___awdiv@divisor,f
   875  06AD  0DF7               	rlf	___awdiv@divisor+1,f
   876  06AE  3EFF               	addlw	-1
   877  06AF  1D03               	skipz
   878  06B0  2EAB               	goto	u315
   879  06B1  3001               	movlw	1
   880  06B2  00FA               	movwf	??___awdiv
   881  06B3  087A               	movf	??___awdiv,w
   882  06B4  07A8               	addwf	___awdiv@counter,f
   883  06B5  2EA8               	goto	l676
   884  06B6                     l678:	
   885  06B6  3001               	movlw	1
   886  06B7                     u335:	
   887  06B7  1003               	clrc
   888  06B8  0DAA               	rlf	___awdiv@quotient,f
   889  06B9  0DAB               	rlf	___awdiv@quotient+1,f
   890  06BA  3EFF               	addlw	-1
   891  06BB  1D03               	skipz
   892  06BC  2EB7               	goto	u335
   893  06BD  0877               	movf	___awdiv@divisor+1,w
   894  06BE  0279               	subwf	___awdiv@dividend+1,w
   895  06BF  1D03               	skipz
   896  06C0  2EC3               	goto	u345
   897  06C1  0876               	movf	___awdiv@divisor,w
   898  06C2  0278               	subwf	___awdiv@dividend,w
   899  06C3                     u345:	
   900  06C3  1C03               	skipc
   901  06C4  2ECC               	goto	l684
   902  06C5  0876               	movf	___awdiv@divisor,w
   903  06C6  02F8               	subwf	___awdiv@dividend,f
   904  06C7  0877               	movf	___awdiv@divisor+1,w
   905  06C8  1C03               	skipc
   906  06C9  03F9               	decf	___awdiv@dividend+1,f
   907  06CA  02F9               	subwf	___awdiv@dividend+1,f
   908  06CB  142A               	bsf	___awdiv@quotient,0
   909  06CC                     l684:	
   910  06CC  3001               	movlw	1
   911  06CD                     u355:	
   912  06CD  1003               	clrc
   913  06CE  0CF7               	rrf	___awdiv@divisor+1,f
   914  06CF  0CF6               	rrf	___awdiv@divisor,f
   915  06D0  3EFF               	addlw	-1
   916  06D1  1D03               	skipz
   917  06D2  2ECD               	goto	u355
   918  06D3  3001               	movlw	1
   919  06D4  02A8               	subwf	___awdiv@counter,f
   920  06D5  1D03               	btfss	3,2
   921  06D6  2EB6               	goto	l678
   922  06D7                     l688:	
   923  06D7  0829               	movf	___awdiv@sign,w
   924  06D8  1903               	btfsc	3,2
   925  06D9  2EDF               	goto	l692
   926  06DA  09AA               	comf	___awdiv@quotient,f
   927  06DB  09AB               	comf	___awdiv@quotient+1,f
   928  06DC  0AAA               	incf	___awdiv@quotient,f
   929  06DD  1903               	skipnz
   930  06DE  0AAB               	incf	___awdiv@quotient+1,f
   931  06DF                     l692:	
   932  06DF  082B               	movf	___awdiv@quotient+1,w
   933  06E0  00F7               	movwf	?___awdiv+1
   934  06E1  082A               	movf	___awdiv@quotient,w
   935  06E2  00F6               	movwf	?___awdiv
   936  06E3  0008               	return
   937  06E4                     __end_of___awdiv:	
   938  007E                     btemp	set	126	;btemp
   939  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    10
    Data        0
    BSS         2
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80      8      16
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1430
                                              4 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     410
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     402
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     618
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
     ___wmul (ARG)
   ___awmod
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      8      10       5       20.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1D      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 07 12:16:18 2020

                      pc 0002              __CFG_CP$OFF 0000             ___awdiv@sign 0029  
                     fsr 0004      ___wmul@multiplicand 0072              __CFG_LVP$ON 0000  
                    l122 0627                      l704 0648                      l640 061F  
                    l730 0684                      l722 0671                      l660 0695  
                    l716 0655                      l708 064F                      l718 0663  
                    l726 067C                      l736 06F0                      l666 06A0  
                    l692 06DF                      l684 06CC                      l676 06A8  
                    l678 06B6                      l688 06D7                      _RA0 0028  
                    _RA1 0029                      _RC2 003A                      _RC3 003B  
                    u315 06AB                      u335 06B7                      u415 0658  
                    u255 0628                      u345 06C3                      u265 062F  
           __CFG_CPD$OFF 0000                      u355 06CD                      u435 0669  
                    u507 07ED                      u445 0672                      u477 079C  
                    u487 07B7                      u497 07D2                      fsr0 0004  
           ___awmod@sign 0076             __CFG_FOSC$XT 0000             __CFG_WRT$OFF 0000  
                   _dizi 0009                     _main 06E4                     _sayi 007B  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 0000  
                  ?_main 0070          __end_of___awdiv 06E4            __CFG_WDTE$OFF 0000  
        __end_of___awmod 0689          ___awdiv@divisor 0076          ___awdiv@counter 0028  
                  _PORTA 0005                    _PORTD 0008                    _TRISA 0085  
                  _TRISD 0088                    _onlar 0024                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FA  
           __end_of_dizi 0013             __end_of_main 07FA                   ??_main 002C  
       ___awdiv@dividend 0078           __CFG_PWRTE$OFF 0000                   ___wmul 061D  
              ??___awdiv 007A                ??___awmod 0074                   _binler 0020  
                 _birler 0026         ___awdiv@quotient 002A          ___awmod@divisor 0070  
        ___awmod@counter 0075                   _yuzler 0022  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 06E4                  ?___wmul 0070  
             __stringtab 0003                  ___awdiv 0689                  ___awmod 063E  
        __size_of___wmul 0021                  __ptext1 061D                  __ptext2 063E  
                __ptext3 0689         ___awmod@dividend 0072     end_of_initialization 07FC  
         __end_of___wmul 063E      start_initialization 07FA                 ??___wmul 0074  
            __pbssCOMMON 007B                ___latbits 0002            __pcstackBANK0 0028  
              __pnvBANK0 0020                 ?___awdiv 0076                 ?___awmod 0070  
              __pstrings 0003           ___wmul@product 0074              __stringbase 0008  
      ___wmul@multiplier 0070         __size_of___awdiv 005B         __size_of___awmod 004B  
     __end_of__stringtab 0009            __size_of_main 0116                stringcode 0003  
               stringdir 0003                 stringtab 0003  
