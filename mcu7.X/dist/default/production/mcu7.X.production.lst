

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 07 17:49:58 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 1.45
    17                           ; Generated 16/11/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110                           
   111                           	psect	strings
   112  0003                     __pstrings:	
   113  0003                     stringtab:	
   114  0003                     __stringtab:	
   115  0003                     stringcode:	
   116                           ;	String table - string pointers are 1 byte each
   117                           
   118  0003                     stringdir:	
   119  0003  3000               	movlw	high stringdir
   120  0004  008A               	movwf	10
   121  0005  0804               	movf	4,w
   122  0006  0A84               	incf	4,f
   123  0007  0782               	addwf	2,f
   124  0008                     __stringbase:	
   125  0008  3400               	retlw	0
   126  0009                     __end_of__stringtab:	
   127  0009                     _dizi:	
   128  0009  343F               	retlw	63
   129  000A  3406               	retlw	6
   130  000B  345B               	retlw	91
   131  000C  344F               	retlw	79
   132  000D  3466               	retlw	102
   133  000E  346D               	retlw	109
   134  000F  347D               	retlw	125
   135  0010  3407               	retlw	7
   136  0011  347F               	retlw	127
   137  0012  346F               	retlw	111
   138  0013                     __end_of_dizi:	
   139                           
   140                           	psect	nvBANK0
   141  0020                     __pnvBANK0:	
   142  0020                     _binler:	
   143  0020                     	ds	2
   144  0022                     _yuzler:	
   145  0022                     	ds	2
   146  0024                     _onlar:	
   147  0024                     	ds	2
   148  0026                     _birler:	
   149  0026                     	ds	2
   150  0007                     _PORTC	set	7
   151  0006                     _PORTB	set	6
   152  003B                     _RC3	set	59
   153  003A                     _RC2	set	58
   154  0039                     _RC1	set	57
   155  0038                     _RC0	set	56
   156  0087                     _TRISC	set	135
   157  0086                     _TRISB	set	134
   158                           
   159                           ; #config settings
   160  0000                     
   161                           	psect	cinit
   162  07FA                     start_initialization:	
   163  07FA                     __initialization:	
   164                           
   165                           ; Clear objects allocated to COMMON
   166  07FA  01FB               	clrf	__pbssCOMMON& (0+127)
   167  07FB  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   168  07FC                     end_of_initialization:	
   169                           ;End of C runtime variable initialization code
   170                           
   171  07FC                     __end_of__initialization:	
   172  07FC  0183               	clrf	3
   173  07FD  120A  118A  2EF1   	ljmp	_main	;jump to C main() function
   174                           
   175                           	psect	bssCOMMON
   176  007B                     __pbssCOMMON:	
   177  007B                     _sayi:	
   178  007B                     	ds	2
   179                           
   180                           	psect	cstackCOMMON
   181  0070                     __pcstackCOMMON:	
   182  0070                     ?_main:	
   183  0070                     ?___wmul:	
   184                           ; 1 bytes @ 0x0
   185                           
   186  0070                     ?___awmod:	
   187                           ; 2 bytes @ 0x0
   188                           
   189  0070                     ___wmul@multiplier:	
   190                           ; 2 bytes @ 0x0
   191                           
   192  0070                     ___awmod@divisor:	
   193                           ; 2 bytes @ 0x0
   194                           
   195                           
   196                           ; 2 bytes @ 0x0
   197  0070                     	ds	2
   198  0072                     ___wmul@multiplicand:	
   199  0072                     ___awmod@dividend:	
   200                           ; 2 bytes @ 0x2
   201                           
   202                           
   203                           ; 2 bytes @ 0x2
   204  0072                     	ds	2
   205  0074                     ??___wmul:	
   206  0074                     ??___awmod:	
   207                           ; 1 bytes @ 0x4
   208                           
   209  0074                     ___wmul@product:	
   210                           ; 1 bytes @ 0x4
   211                           
   212                           
   213                           ; 2 bytes @ 0x4
   214  0074                     	ds	1
   215  0075                     ___awmod@counter:	
   216                           
   217                           ; 1 bytes @ 0x5
   218  0075                     	ds	1
   219  0076                     ?___awdiv:	
   220  0076                     ___awmod@sign:	
   221                           ; 2 bytes @ 0x6
   222                           
   223  0076                     ___awdiv@divisor:	
   224                           ; 1 bytes @ 0x6
   225                           
   226                           
   227                           ; 2 bytes @ 0x6
   228  0076                     	ds	2
   229  0078                     ___awdiv@dividend:	
   230                           
   231                           ; 2 bytes @ 0x8
   232  0078                     	ds	2
   233  007A                     ??___awdiv:	
   234                           
   235                           ; 1 bytes @ 0xA
   236  007A                     	ds	1
   237                           
   238                           	psect	cstackBANK0
   239  0028                     __pcstackBANK0:	
   240  0028                     ___awdiv@counter:	
   241                           
   242                           ; 1 bytes @ 0x0
   243  0028                     	ds	1
   244  0029                     ___awdiv@sign:	
   245                           
   246                           ; 1 bytes @ 0x1
   247  0029                     	ds	1
   248  002A                     ___awdiv@quotient:	
   249                           
   250                           ; 2 bytes @ 0x2
   251  002A                     	ds	2
   252  002C                     ??_main:	
   253                           
   254                           ; 1 bytes @ 0x4
   255  002C                     	ds	4
   256                           
   257                           	psect	maintext
   258  06F1                     __pmaintext:	
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 17 in file "mcu7.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   273 ;; Tracked objects:
   274 ;;		On entry : B00/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   278 ;;      Params:         0       0       0       0       0
   279 ;;      Locals:         0       0       0       0       0
   280 ;;      Temps:          0       4       0       0       0
   281 ;;      Totals:         0       4       0       0       0
   282 ;;Total ram usage:        4 bytes
   283 ;; Hardware stack levels required when called:    1
   284 ;; This function calls:
   285 ;;		___awdiv
   286 ;;		___awmod
   287 ;;		___wmul
   288 ;; This function is called by:
   289 ;;		Startup code after reset
   290 ;; This function uses a non-reentrant model
   291 ;;
   292                           
   293                           
   294                           ;psect for function _main
   295  06F1                     _main:	
   296                           
   297                           ;mcu7.c: 19: TRISB = 0x00;
   298                           
   299                           ;incstack = 0
   300                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   301  06F1  1683               	bsf	3,5	;RP0=1, select bank1
   302  06F2  1303               	bcf	3,6	;RP1=0, select bank1
   303  06F3  0186               	clrf	6	;volatile
   304                           
   305                           ;mcu7.c: 20: PORTB = 0;
   306  06F4  1283               	bcf	3,5	;RP0=0, select bank0
   307  06F5  1303               	bcf	3,6	;RP1=0, select bank0
   308  06F6  0186               	clrf	6	;volatile
   309                           
   310                           ;mcu7.c: 21: TRISC = 0x00;
   311  06F7  1683               	bsf	3,5	;RP0=1, select bank1
   312  06F8  1303               	bcf	3,6	;RP1=0, select bank1
   313  06F9  0187               	clrf	7	;volatile
   314                           
   315                           ;mcu7.c: 22: PORTC = 0x03;
   316  06FA  3003               	movlw	3
   317  06FB  1283               	bcf	3,5	;RP0=0, select bank0
   318  06FC  1303               	bcf	3,6	;RP1=0, select bank0
   319  06FD  0087               	movwf	7	;volatile
   320  06FE                     l740:	
   321                           ;mcu7.c: 24: while (1) {
   322                           
   323                           
   324                           ;mcu7.c: 25: binler=sayi/1000;
   325  06FE  30E8               	movlw	232
   326  06FF  00F6               	movwf	___awdiv@divisor
   327  0700  3003               	movlw	3
   328  0701  00F7               	movwf	___awdiv@divisor+1
   329  0702  087C               	movf	_sayi+1,w
   330  0703  00F9               	movwf	___awdiv@dividend+1
   331  0704  087B               	movf	_sayi,w
   332  0705  00F8               	movwf	___awdiv@dividend
   333  0706  120A  118A  2696  120A  118A  	fcall	___awdiv
   334  070B  0877               	movf	?___awdiv+1,w
   335  070C  1283               	bcf	3,5	;RP0=0, select bank0
   336  070D  1303               	bcf	3,6	;RP1=0, select bank0
   337  070E  00A1               	movwf	_binler+1
   338  070F  0876               	movf	?___awdiv,w
   339  0710  00A0               	movwf	_binler
   340                           
   341                           ;mcu7.c: 26: yuzler=(sayi-binler*1000)/100;
   342  0711  3064               	movlw	100
   343  0712  00F6               	movwf	___awdiv@divisor
   344  0713  3000               	movlw	0
   345  0714  00F7               	movwf	___awdiv@divisor+1
   346  0715  0821               	movf	_binler+1,w
   347  0716  00F1               	movwf	___wmul@multiplier+1
   348  0717  0820               	movf	_binler,w
   349  0718  00F0               	movwf	___wmul@multiplier
   350  0719  30E8               	movlw	232
   351  071A  00F2               	movwf	___wmul@multiplicand
   352  071B  3003               	movlw	3
   353  071C  00F3               	movwf	___wmul@multiplicand+1
   354  071D  120A  118A  262A  120A  118A  	fcall	___wmul
   355  0722  0970               	comf	?___wmul,w
   356  0723  1283               	bcf	3,5	;RP0=0, select bank0
   357  0724  1303               	bcf	3,6	;RP1=0, select bank0
   358  0725  00AC               	movwf	??_main
   359  0726  0971               	comf	?___wmul+1,w
   360  0727  00AD               	movwf	??_main+1
   361  0728  0AAC               	incf	??_main,f
   362  0729  1903               	skipnz
   363  072A  0AAD               	incf	??_main+1,f
   364  072B  087B               	movf	_sayi,w
   365  072C  072C               	addwf	??_main,w
   366  072D  00F8               	movwf	___awdiv@dividend
   367  072E  087C               	movf	_sayi+1,w
   368  072F  1803               	skipnc
   369  0730  0A7C               	incf	_sayi+1,w
   370  0731  072D               	addwf	??_main+1,w
   371  0732  00F9               	movwf	___awdiv@dividend+1
   372  0733  120A  118A  2696  120A  118A  	fcall	___awdiv
   373  0738  0877               	movf	?___awdiv+1,w
   374  0739  1283               	bcf	3,5	;RP0=0, select bank0
   375  073A  1303               	bcf	3,6	;RP1=0, select bank0
   376  073B  00A3               	movwf	_yuzler+1
   377  073C  0876               	movf	?___awdiv,w
   378  073D  00A2               	movwf	_yuzler
   379                           
   380                           ;mcu7.c: 27: onlar=(sayi-binler*1000-yuzler*100)/10;
   381  073E  300A               	movlw	10
   382  073F  00F6               	movwf	___awdiv@divisor
   383  0740  3000               	movlw	0
   384  0741  00F7               	movwf	___awdiv@divisor+1
   385  0742  0821               	movf	_binler+1,w
   386  0743  00F1               	movwf	___wmul@multiplier+1
   387  0744  0820               	movf	_binler,w
   388  0745  00F0               	movwf	___wmul@multiplier
   389  0746  30E8               	movlw	232
   390  0747  00F2               	movwf	___wmul@multiplicand
   391  0748  3003               	movlw	3
   392  0749  00F3               	movwf	___wmul@multiplicand+1
   393  074A  120A  118A  262A  120A  118A  	fcall	___wmul
   394  074F  0870               	movf	?___wmul,w
   395  0750  1283               	bcf	3,5	;RP0=0, select bank0
   396  0751  1303               	bcf	3,6	;RP1=0, select bank0
   397  0752  00AC               	movwf	??_main
   398  0753  0871               	movf	?___wmul+1,w
   399  0754  00AD               	movwf	??_main+1
   400  0755  0823               	movf	_yuzler+1,w
   401  0756  00F1               	movwf	___wmul@multiplier+1
   402  0757  0822               	movf	_yuzler,w
   403  0758  00F0               	movwf	___wmul@multiplier
   404  0759  3064               	movlw	100
   405  075A  00F2               	movwf	___wmul@multiplicand
   406  075B  3000               	movlw	0
   407  075C  00F3               	movwf	___wmul@multiplicand+1
   408  075D  120A  118A  262A  120A  118A  	fcall	___wmul
   409  0762  0870               	movf	?___wmul,w
   410  0763  1283               	bcf	3,5	;RP0=0, select bank0
   411  0764  1303               	bcf	3,6	;RP1=0, select bank0
   412  0765  072C               	addwf	??_main,w
   413  0766  00AE               	movwf	??_main+2
   414  0767  0871               	movf	?___wmul+1,w
   415  0768  1803               	skipnc
   416  0769  0A71               	incf	?___wmul+1,w
   417  076A  072D               	addwf	??_main+1,w
   418  076B  00AF               	movwf	??_main+3
   419  076C  09AE               	comf	??_main+2,f
   420  076D  09AF               	comf	??_main+3,f
   421  076E  0AAE               	incf	??_main+2,f
   422  076F  1903               	skipnz
   423  0770  0AAF               	incf	??_main+3,f
   424  0771  087B               	movf	_sayi,w
   425  0772  072E               	addwf	??_main+2,w
   426  0773  00F8               	movwf	___awdiv@dividend
   427  0774  087C               	movf	_sayi+1,w
   428  0775  1803               	skipnc
   429  0776  0A7C               	incf	_sayi+1,w
   430  0777  072F               	addwf	??_main+3,w
   431  0778  00F9               	movwf	___awdiv@dividend+1
   432  0779  120A  118A  2696  120A  118A  	fcall	___awdiv
   433  077E  0877               	movf	?___awdiv+1,w
   434  077F  1283               	bcf	3,5	;RP0=0, select bank0
   435  0780  1303               	bcf	3,6	;RP1=0, select bank0
   436  0781  00A5               	movwf	_onlar+1
   437  0782  0876               	movf	?___awdiv,w
   438  0783  00A4               	movwf	_onlar
   439                           
   440                           ;mcu7.c: 28: birler=sayi%10;
   441  0784  300A               	movlw	10
   442  0785  00F0               	movwf	___awmod@divisor
   443  0786  3000               	movlw	0
   444  0787  00F1               	movwf	___awmod@divisor+1
   445  0788  087C               	movf	_sayi+1,w
   446  0789  00F3               	movwf	___awmod@dividend+1
   447  078A  087B               	movf	_sayi,w
   448  078B  00F2               	movwf	___awmod@dividend
   449  078C  120A  118A  264B  120A  118A  	fcall	___awmod
   450  0791  0871               	movf	?___awmod+1,w
   451  0792  1283               	bcf	3,5	;RP0=0, select bank0
   452  0793  1303               	bcf	3,6	;RP1=0, select bank0
   453  0794  00A7               	movwf	_birler+1
   454  0795  0870               	movf	?___awmod,w
   455  0796  00A6               	movwf	_birler
   456                           
   457                           ;mcu7.c: 30: RC0= 0;
   458  0797  1007               	bcf	7,0	;volatile
   459                           
   460                           ;mcu7.c: 31: PORTB = dizi[birler];
   461  0798  0826               	movf	_birler,w
   462  0799  3E01               	addlw	low ((_dizi-__stringbase)| (0+32768))
   463  079A  0084               	movwf	4
   464  079B  120A  118A  2003  120A  118A  	fcall	stringdir
   465  07A0  0086               	movwf	6	;volatile
   466                           
   467                           ;mcu7.c: 32: _delay((unsigned long)((10)*(4000000/4000.0)));
   468  07A1  300D               	movlw	13
   469  07A2  1283               	bcf	3,5	;RP0=0, select bank0
   470  07A3  1303               	bcf	3,6	;RP1=0, select bank0
   471  07A4  00AD               	movwf	??_main+1
   472  07A5  30FB               	movlw	251
   473  07A6  00AC               	movwf	??_main
   474  07A7                     u477:	
   475  07A7  0BAC               	decfsz	??_main,f
   476  07A8  2FA7               	goto	u477
   477  07A9  0BAD               	decfsz	??_main+1,f
   478  07AA  2FA7               	goto	u477
   479                           
   480                           ;mcu7.c: 33: RC0=1;
   481  07AB  1283               	bcf	3,5	;RP0=0, select bank0
   482  07AC  1303               	bcf	3,6	;RP1=0, select bank0
   483  07AD  1407               	bsf	7,0	;volatile
   484                           
   485                           ;mcu7.c: 35: RC1= 0;
   486  07AE  1087               	bcf	7,1	;volatile
   487                           
   488                           ;mcu7.c: 36: PORTB = dizi[onlar];
   489  07AF  0824               	movf	_onlar,w
   490  07B0  3E01               	addlw	low ((_dizi-__stringbase)| (0+32768))
   491  07B1  0084               	movwf	4
   492  07B2  120A  118A  2003  120A  118A  	fcall	stringdir
   493  07B7  0086               	movwf	6	;volatile
   494                           
   495                           ;mcu7.c: 37: _delay((unsigned long)((10)*(4000000/4000.0)));
   496  07B8  300D               	movlw	13
   497  07B9  1283               	bcf	3,5	;RP0=0, select bank0
   498  07BA  1303               	bcf	3,6	;RP1=0, select bank0
   499  07BB  00AD               	movwf	??_main+1
   500  07BC  30FB               	movlw	251
   501  07BD  00AC               	movwf	??_main
   502  07BE                     u487:	
   503  07BE  0BAC               	decfsz	??_main,f
   504  07BF  2FBE               	goto	u487
   505  07C0  0BAD               	decfsz	??_main+1,f
   506  07C1  2FBE               	goto	u487
   507                           
   508                           ;mcu7.c: 38: RC1=1;
   509  07C2  1283               	bcf	3,5	;RP0=0, select bank0
   510  07C3  1303               	bcf	3,6	;RP1=0, select bank0
   511  07C4  1487               	bsf	7,1	;volatile
   512                           
   513                           ;mcu7.c: 40: RC2= 0;
   514  07C5  1107               	bcf	7,2	;volatile
   515                           
   516                           ;mcu7.c: 41: PORTB = dizi[yuzler];
   517  07C6  0822               	movf	_yuzler,w
   518  07C7  3E01               	addlw	low ((_dizi-__stringbase)| (0+32768))
   519  07C8  0084               	movwf	4
   520  07C9  120A  118A  2003  120A  118A  	fcall	stringdir
   521  07CE  0086               	movwf	6	;volatile
   522                           
   523                           ;mcu7.c: 42: _delay((unsigned long)((10)*(4000000/4000.0)));
   524  07CF  300D               	movlw	13
   525  07D0  1283               	bcf	3,5	;RP0=0, select bank0
   526  07D1  1303               	bcf	3,6	;RP1=0, select bank0
   527  07D2  00AD               	movwf	??_main+1
   528  07D3  30FB               	movlw	251
   529  07D4  00AC               	movwf	??_main
   530  07D5                     u497:	
   531  07D5  0BAC               	decfsz	??_main,f
   532  07D6  2FD5               	goto	u497
   533  07D7  0BAD               	decfsz	??_main+1,f
   534  07D8  2FD5               	goto	u497
   535                           
   536                           ;mcu7.c: 43: RC2=1;
   537  07D9  1283               	bcf	3,5	;RP0=0, select bank0
   538  07DA  1303               	bcf	3,6	;RP1=0, select bank0
   539  07DB  1507               	bsf	7,2	;volatile
   540                           
   541                           ;mcu7.c: 45: RC3= 0;
   542  07DC  1187               	bcf	7,3	;volatile
   543                           
   544                           ;mcu7.c: 46: PORTB = dizi[binler];
   545  07DD  0820               	movf	_binler,w
   546  07DE  3E01               	addlw	low ((_dizi-__stringbase)| (0+32768))
   547  07DF  0084               	movwf	4
   548  07E0  120A  118A  2003  120A  118A  	fcall	stringdir
   549  07E5  0086               	movwf	6	;volatile
   550                           
   551                           ;mcu7.c: 47: _delay((unsigned long)((10)*(4000000/4000.0)));
   552  07E6  300D               	movlw	13
   553  07E7  1283               	bcf	3,5	;RP0=0, select bank0
   554  07E8  1303               	bcf	3,6	;RP1=0, select bank0
   555  07E9  00AD               	movwf	??_main+1
   556  07EA  30FB               	movlw	251
   557  07EB  00AC               	movwf	??_main
   558  07EC                     u507:	
   559  07EC  0BAC               	decfsz	??_main,f
   560  07ED  2FEC               	goto	u507
   561  07EE  0BAD               	decfsz	??_main+1,f
   562  07EF  2FEC               	goto	u507
   563                           
   564                           ;mcu7.c: 48: RC3=1;
   565  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   566  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   567  07F2  1587               	bsf	7,3	;volatile
   568                           
   569                           ;mcu7.c: 49: sayi++ ;}
   570  07F3  3001               	movlw	1
   571  07F4  07FB               	addwf	_sayi,f
   572  07F5  1803               	skipnc
   573  07F6  0AFC               	incf	_sayi+1,f
   574  07F7  3000               	movlw	0
   575  07F8  07FC               	addwf	_sayi+1,f
   576  07F9  2EFE               	goto	l740
   577  07FA                     __end_of_main:	
   578                           
   579                           	psect	text1
   580  062A                     __ptext1:	
   581 ;; *************** function ___wmul *****************
   582 ;; Defined at:
   583 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;  multiplier      2    0[COMMON] unsigned int 
   586 ;;  multiplicand    2    2[COMMON] unsigned int 
   587 ;; Auto vars:     Size  Location     Type
   588 ;;  product         2    4[COMMON] unsigned int 
   589 ;; Return value:  Size  Location     Type
   590 ;;                  2    0[COMMON] unsigned int 
   591 ;; Registers used:
   592 ;;		wreg, status,2, status,0
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   598 ;;      Params:         4       0       0       0       0
   599 ;;      Locals:         2       0       0       0       0
   600 ;;      Temps:          0       0       0       0       0
   601 ;;      Totals:         6       0       0       0       0
   602 ;;Total ram usage:        6 bytes
   603 ;; Hardware stack levels used:    1
   604 ;; This function calls:
   605 ;;		Nothing
   606 ;; This function is called by:
   607 ;;		_main
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           
   612                           ;psect for function ___wmul
   613  062A                     ___wmul:	
   614                           
   615                           ;incstack = 0
   616                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   617  062A  01F4               	clrf	___wmul@product
   618  062B  01F5               	clrf	___wmul@product+1
   619  062C                     l642:	
   620  062C  1C70               	btfss	___wmul@multiplier,0
   621  062D  2E34               	goto	l122
   622  062E  0872               	movf	___wmul@multiplicand,w
   623  062F  07F4               	addwf	___wmul@product,f
   624  0630  1803               	skipnc
   625  0631  0AF5               	incf	___wmul@product+1,f
   626  0632  0873               	movf	___wmul@multiplicand+1,w
   627  0633  07F5               	addwf	___wmul@product+1,f
   628  0634                     l122:	
   629  0634  3001               	movlw	1
   630  0635                     u255:	
   631  0635  1003               	clrc
   632  0636  0DF2               	rlf	___wmul@multiplicand,f
   633  0637  0DF3               	rlf	___wmul@multiplicand+1,f
   634  0638  3EFF               	addlw	-1
   635  0639  1D03               	skipz
   636  063A  2E35               	goto	u255
   637  063B  3001               	movlw	1
   638  063C                     u265:	
   639  063C  1003               	clrc
   640  063D  0CF1               	rrf	___wmul@multiplier+1,f
   641  063E  0CF0               	rrf	___wmul@multiplier,f
   642  063F  3EFF               	addlw	-1
   643  0640  1D03               	skipz
   644  0641  2E3C               	goto	u265
   645  0642  0870               	movf	___wmul@multiplier,w
   646  0643  0471               	iorwf	___wmul@multiplier+1,w
   647  0644  1D03               	btfss	3,2
   648  0645  2E2C               	goto	l642
   649  0646  0875               	movf	___wmul@product+1,w
   650  0647  00F1               	movwf	?___wmul+1
   651  0648  0874               	movf	___wmul@product,w
   652  0649  00F0               	movwf	?___wmul
   653  064A  0008               	return
   654  064B                     __end_of___wmul:	
   655                           
   656                           	psect	text2
   657  064B                     __ptext2:	
   658 ;; *************** function ___awmod *****************
   659 ;; Defined at:
   660 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;  divisor         2    0[COMMON] int 
   663 ;;  dividend        2    2[COMMON] int 
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  sign            1    6[COMMON] unsigned char 
   666 ;;  counter         1    5[COMMON] unsigned char 
   667 ;; Return value:  Size  Location     Type
   668 ;;                  2    0[COMMON] int 
   669 ;; Registers used:
   670 ;;		wreg, status,2, status,0
   671 ;; Tracked objects:
   672 ;;		On entry : 0/0
   673 ;;		On exit  : 0/0
   674 ;;		Unchanged: 0/0
   675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   676 ;;      Params:         4       0       0       0       0
   677 ;;      Locals:         2       0       0       0       0
   678 ;;      Temps:          1       0       0       0       0
   679 ;;      Totals:         7       0       0       0       0
   680 ;;Total ram usage:        7 bytes
   681 ;; Hardware stack levels used:    1
   682 ;; This function calls:
   683 ;;		Nothing
   684 ;; This function is called by:
   685 ;;		_main
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           
   690                           ;psect for function ___awmod
   691  064B                     ___awmod:	
   692                           
   693                           ;incstack = 0
   694                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   695  064B  01F6               	clrf	___awmod@sign
   696  064C  1FF3               	btfss	___awmod@dividend+1,7
   697  064D  2E55               	goto	l706
   698  064E  09F2               	comf	___awmod@dividend,f
   699  064F  09F3               	comf	___awmod@dividend+1,f
   700  0650  0AF2               	incf	___awmod@dividend,f
   701  0651  1903               	skipnz
   702  0652  0AF3               	incf	___awmod@dividend+1,f
   703  0653  01F6               	clrf	___awmod@sign
   704  0654  0AF6               	incf	___awmod@sign,f
   705  0655                     l706:	
   706  0655  1FF1               	btfss	___awmod@divisor+1,7
   707  0656  2E5C               	goto	l710
   708  0657  09F0               	comf	___awmod@divisor,f
   709  0658  09F1               	comf	___awmod@divisor+1,f
   710  0659  0AF0               	incf	___awmod@divisor,f
   711  065A  1903               	skipnz
   712  065B  0AF1               	incf	___awmod@divisor+1,f
   713  065C                     l710:	
   714  065C  0870               	movf	___awmod@divisor,w
   715  065D  0471               	iorwf	___awmod@divisor+1,w
   716  065E  1903               	btfsc	3,2
   717  065F  2E89               	goto	l728
   718  0660  01F5               	clrf	___awmod@counter
   719  0661  0AF5               	incf	___awmod@counter,f
   720  0662                     l718:	
   721  0662  1BF1               	btfsc	___awmod@divisor+1,7
   722  0663  2E70               	goto	l720
   723  0664  3001               	movlw	1
   724  0665                     u415:	
   725  0665  1003               	clrc
   726  0666  0DF0               	rlf	___awmod@divisor,f
   727  0667  0DF1               	rlf	___awmod@divisor+1,f
   728  0668  3EFF               	addlw	-1
   729  0669  1D03               	skipz
   730  066A  2E65               	goto	u415
   731  066B  3001               	movlw	1
   732  066C  00F4               	movwf	??___awmod
   733  066D  0874               	movf	??___awmod,w
   734  066E  07F5               	addwf	___awmod@counter,f
   735  066F  2E62               	goto	l718
   736  0670                     l720:	
   737  0670  0871               	movf	___awmod@divisor+1,w
   738  0671  0273               	subwf	___awmod@dividend+1,w
   739  0672  1D03               	skipz
   740  0673  2E76               	goto	u435
   741  0674  0870               	movf	___awmod@divisor,w
   742  0675  0272               	subwf	___awmod@dividend,w
   743  0676                     u435:	
   744  0676  1C03               	skipc
   745  0677  2E7E               	goto	l724
   746  0678  0870               	movf	___awmod@divisor,w
   747  0679  02F2               	subwf	___awmod@dividend,f
   748  067A  0871               	movf	___awmod@divisor+1,w
   749  067B  1C03               	skipc
   750  067C  03F3               	decf	___awmod@dividend+1,f
   751  067D  02F3               	subwf	___awmod@dividend+1,f
   752  067E                     l724:	
   753  067E  3001               	movlw	1
   754  067F                     u445:	
   755  067F  1003               	clrc
   756  0680  0CF1               	rrf	___awmod@divisor+1,f
   757  0681  0CF0               	rrf	___awmod@divisor,f
   758  0682  3EFF               	addlw	-1
   759  0683  1D03               	skipz
   760  0684  2E7F               	goto	u445
   761  0685  3001               	movlw	1
   762  0686  02F5               	subwf	___awmod@counter,f
   763  0687  1D03               	btfss	3,2
   764  0688  2E70               	goto	l720
   765  0689                     l728:	
   766  0689  0876               	movf	___awmod@sign,w
   767  068A  1903               	btfsc	3,2
   768  068B  2E91               	goto	l732
   769  068C  09F2               	comf	___awmod@dividend,f
   770  068D  09F3               	comf	___awmod@dividend+1,f
   771  068E  0AF2               	incf	___awmod@dividend,f
   772  068F  1903               	skipnz
   773  0690  0AF3               	incf	___awmod@dividend+1,f
   774  0691                     l732:	
   775  0691  0873               	movf	___awmod@dividend+1,w
   776  0692  00F1               	movwf	?___awmod+1
   777  0693  0872               	movf	___awmod@dividend,w
   778  0694  00F0               	movwf	?___awmod
   779  0695  0008               	return
   780  0696                     __end_of___awmod:	
   781                           
   782                           	psect	text3
   783  0696                     __ptext3:	
   784 ;; *************** function ___awdiv *****************
   785 ;; Defined at:
   786 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
   787 ;; Parameters:    Size  Location     Type
   788 ;;  divisor         2    6[COMMON] int 
   789 ;;  dividend        2    8[COMMON] int 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  quotient        2    2[BANK0 ] int 
   792 ;;  sign            1    1[BANK0 ] unsigned char 
   793 ;;  counter         1    0[BANK0 ] unsigned char 
   794 ;; Return value:  Size  Location     Type
   795 ;;                  2    6[COMMON] int 
   796 ;; Registers used:
   797 ;;		wreg, status,2, status,0
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   803 ;;      Params:         4       0       0       0       0
   804 ;;      Locals:         0       4       0       0       0
   805 ;;      Temps:          1       0       0       0       0
   806 ;;      Totals:         5       4       0       0       0
   807 ;;Total ram usage:        9 bytes
   808 ;; Hardware stack levels used:    1
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           
   817                           ;psect for function ___awdiv
   818  0696                     ___awdiv:	
   819                           
   820                           ;incstack = 0
   821                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   822  0696  1283               	bcf	3,5	;RP0=0, select bank0
   823  0697  1303               	bcf	3,6	;RP1=0, select bank0
   824  0698  01A9               	clrf	___awdiv@sign
   825  0699  1FF7               	btfss	___awdiv@divisor+1,7
   826  069A  2EA2               	goto	l662
   827  069B  09F6               	comf	___awdiv@divisor,f
   828  069C  09F7               	comf	___awdiv@divisor+1,f
   829  069D  0AF6               	incf	___awdiv@divisor,f
   830  069E  1903               	skipnz
   831  069F  0AF7               	incf	___awdiv@divisor+1,f
   832  06A0  01A9               	clrf	___awdiv@sign
   833  06A1  0AA9               	incf	___awdiv@sign,f
   834  06A2                     l662:	
   835  06A2  1FF9               	btfss	___awdiv@dividend+1,7
   836  06A3  2EAD               	goto	l668
   837  06A4  09F8               	comf	___awdiv@dividend,f
   838  06A5  09F9               	comf	___awdiv@dividend+1,f
   839  06A6  0AF8               	incf	___awdiv@dividend,f
   840  06A7  1903               	skipnz
   841  06A8  0AF9               	incf	___awdiv@dividend+1,f
   842  06A9  3001               	movlw	1
   843  06AA  00FA               	movwf	??___awdiv
   844  06AB  087A               	movf	??___awdiv,w
   845  06AC  06A9               	xorwf	___awdiv@sign,f
   846  06AD                     l668:	
   847  06AD  01AA               	clrf	___awdiv@quotient
   848  06AE  01AB               	clrf	___awdiv@quotient+1
   849  06AF  0876               	movf	___awdiv@divisor,w
   850  06B0  0477               	iorwf	___awdiv@divisor+1,w
   851  06B1  1903               	btfsc	3,2
   852  06B2  2EE4               	goto	l690
   853  06B3  01A8               	clrf	___awdiv@counter
   854  06B4  0AA8               	incf	___awdiv@counter,f
   855  06B5                     l678:	
   856  06B5  1BF7               	btfsc	___awdiv@divisor+1,7
   857  06B6  2EC3               	goto	l680
   858  06B7  3001               	movlw	1
   859  06B8                     u315:	
   860  06B8  1003               	clrc
   861  06B9  0DF6               	rlf	___awdiv@divisor,f
   862  06BA  0DF7               	rlf	___awdiv@divisor+1,f
   863  06BB  3EFF               	addlw	-1
   864  06BC  1D03               	skipz
   865  06BD  2EB8               	goto	u315
   866  06BE  3001               	movlw	1
   867  06BF  00FA               	movwf	??___awdiv
   868  06C0  087A               	movf	??___awdiv,w
   869  06C1  07A8               	addwf	___awdiv@counter,f
   870  06C2  2EB5               	goto	l678
   871  06C3                     l680:	
   872  06C3  3001               	movlw	1
   873  06C4                     u335:	
   874  06C4  1003               	clrc
   875  06C5  0DAA               	rlf	___awdiv@quotient,f
   876  06C6  0DAB               	rlf	___awdiv@quotient+1,f
   877  06C7  3EFF               	addlw	-1
   878  06C8  1D03               	skipz
   879  06C9  2EC4               	goto	u335
   880  06CA  0877               	movf	___awdiv@divisor+1,w
   881  06CB  0279               	subwf	___awdiv@dividend+1,w
   882  06CC  1D03               	skipz
   883  06CD  2ED0               	goto	u345
   884  06CE  0876               	movf	___awdiv@divisor,w
   885  06CF  0278               	subwf	___awdiv@dividend,w
   886  06D0                     u345:	
   887  06D0  1C03               	skipc
   888  06D1  2ED9               	goto	l686
   889  06D2  0876               	movf	___awdiv@divisor,w
   890  06D3  02F8               	subwf	___awdiv@dividend,f
   891  06D4  0877               	movf	___awdiv@divisor+1,w
   892  06D5  1C03               	skipc
   893  06D6  03F9               	decf	___awdiv@dividend+1,f
   894  06D7  02F9               	subwf	___awdiv@dividend+1,f
   895  06D8  142A               	bsf	___awdiv@quotient,0
   896  06D9                     l686:	
   897  06D9  3001               	movlw	1
   898  06DA                     u355:	
   899  06DA  1003               	clrc
   900  06DB  0CF7               	rrf	___awdiv@divisor+1,f
   901  06DC  0CF6               	rrf	___awdiv@divisor,f
   902  06DD  3EFF               	addlw	-1
   903  06DE  1D03               	skipz
   904  06DF  2EDA               	goto	u355
   905  06E0  3001               	movlw	1
   906  06E1  02A8               	subwf	___awdiv@counter,f
   907  06E2  1D03               	btfss	3,2
   908  06E3  2EC3               	goto	l680
   909  06E4                     l690:	
   910  06E4  0829               	movf	___awdiv@sign,w
   911  06E5  1903               	btfsc	3,2
   912  06E6  2EEC               	goto	l694
   913  06E7  09AA               	comf	___awdiv@quotient,f
   914  06E8  09AB               	comf	___awdiv@quotient+1,f
   915  06E9  0AAA               	incf	___awdiv@quotient,f
   916  06EA  1903               	skipnz
   917  06EB  0AAB               	incf	___awdiv@quotient+1,f
   918  06EC                     l694:	
   919  06EC  082B               	movf	___awdiv@quotient+1,w
   920  06ED  00F7               	movwf	?___awdiv+1
   921  06EE  082A               	movf	___awdiv@quotient,w
   922  06EF  00F6               	movwf	?___awdiv
   923  06F0  0008               	return
   924  06F1                     __end_of___awdiv:	
   925  007E                     btemp	set	126	;btemp
   926  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    10
    Data        0
    BSS         2
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80      8      16
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___awdiv
    ___awdiv->___wmul

Critical Paths under _main in BANK0

    _main->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1430
                                              4 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     410
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     402
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     618
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
     ___wmul (ARG)
   ___awmod
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      8      10       5       20.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1D      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 07 17:49:58 2020

                      pc 0002              __CFG_CP$OFF 0000             ___awdiv@sign 0029  
                     fsr 0004      ___wmul@multiplicand 0072              __CFG_LVP$ON 0000  
                    l122 0634                      l710 065C                      l720 0670  
                    l706 0655                      l642 062C                      l732 0691  
                    l724 067E                      l740 06FE                      l662 06A2  
                    l718 0662                      l680 06C3                      l728 0689  
                    l690 06E4                      l668 06AD                      l694 06EC  
                    l686 06D9                      l678 06B5                      _RC0 0038  
                    _RC1 0039                      _RC2 003A                      _RC3 003B  
                    u315 06B8                      u335 06C4                      u415 0665  
                    u255 0635                      u345 06D0                      u265 063C  
           __CFG_CPD$OFF 0000                      u355 06DA                      u435 0676  
                    u507 07EC                      u445 067F                      u477 07A7  
                    u487 07BE                      u497 07D5                      fsr0 0004  
           ___awmod@sign 0076             __CFG_FOSC$XT 0000             __CFG_WRT$OFF 0000  
                   _dizi 0009                     _main 06F1                     _sayi 007B  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 0000  
                  ?_main 0070          __end_of___awdiv 06F1            __CFG_WDTE$OFF 0000  
        __end_of___awmod 0696          ___awdiv@divisor 0076          ___awdiv@counter 0028  
                  _PORTB 0006                    _PORTC 0007                    _TRISB 0086  
                  _TRISC 0087                    _onlar 0024                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FA  
           __end_of_dizi 0013             __end_of_main 07FA                   ??_main 002C  
       ___awdiv@dividend 0078           __CFG_PWRTE$OFF 0000                   ___wmul 062A  
              ??___awdiv 007A                ??___awmod 0074                   _binler 0020  
                 _birler 0026         ___awdiv@quotient 002A          ___awmod@divisor 0070  
        ___awmod@counter 0075                   _yuzler 0022  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 06F1                  ?___wmul 0070  
             __stringtab 0003                  ___awdiv 0696                  ___awmod 064B  
        __size_of___wmul 0021                  __ptext1 062A                  __ptext2 064B  
                __ptext3 0696         ___awmod@dividend 0072     end_of_initialization 07FC  
         __end_of___wmul 064B      start_initialization 07FA                 ??___wmul 0074  
            __pbssCOMMON 007B                ___latbits 0002            __pcstackBANK0 0028  
              __pnvBANK0 0020                 ?___awdiv 0076                 ?___awmod 0070  
              __pstrings 0003           ___wmul@product 0074              __stringbase 0008  
      ___wmul@multiplier 0070         __size_of___awdiv 005B         __size_of___awmod 004B  
     __end_of__stringtab 0009            __size_of_main 0109                stringcode 0003  
               stringdir 0003                 stringtab 0003  
